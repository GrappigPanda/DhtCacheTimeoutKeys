package message_handler

import (
        "sync"
        "fmt"
)

type MessageHandler struct {
        sync.RWMutex
        AddKeyChannel chan *KeyValPair
        RemoveKeyChannel chan string
        MessageResponseStore *map[string]chan string
}

type KeyValPair struct {
        Key string
        Value chan string
}

// HandleKeyAdds Manages adding keys to the internal message response store
// between the receiver processes and the sender processes.
func (m *MessageHandler) HandleKeyAdds() {
        var kvPair *KeyValPair

        for {
                kvPair = <-m.AddKeyChannel

                m.Lock()
                if _, keyExists := (*m.MessageResponseStore)[kvPair.Key]; keyExists {
                        go m.handleKeyConflict(kvPair)
                }

                m.Unlock()
        }
}

// HandleKeyDeletions Handles everything associated with having to delete a
// key.
func (m *MessageHandler) HandleKeyDeletions() {
        var key string

        for {
                key = <-m.RemoveKeyChannel

                m.Lock()
                if _, keyExists := (*m.MessageResponseStore)[key]; keyExists {
                        delete((*m.MessageResponseStore), key)
                }

                m.Unlock()
        }
}

func (m *MessageHandler) GetKey(key string) (chan string, error) {
        if value, keyExists := (*m.MessageResponseStore)[key]; keyExists {
                return value, nil
        }

        return nil, fmt.Errorf("No key (%v) found.", key)
}

// handleKeyConflicts maintains the incredibly fun role of deciding what to do
// whenever we determine that a key is in conflict. This ought to be a rare
// event, as the key is generated by creating a command, appending the current
// datetime (with nano seconds) to it, and md5 hashing that. However, there are
// potentials for where this could be an issue. As of right now, the method
// solely sets the key to the value and hopes for the best.
// TODO(ian): Figure out a better way for handling this, it's technical debt
// and not yet fully implemented.
func (m *MessageHandler) handleKeyConflict(kvPair *KeyValPair) {
        m.Lock()
        (*m.MessageResponseStore)[kvPair.Key] = kvPair.Value
        m.Unlock()
}

